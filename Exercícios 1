import java.util.Scanner;

abstract class Calculadora {
    protected double numeroUm;
    protected double numeroDois;
    
    public Calculadora(double numeroUm, double numeroDois) {
        this.numeroUm = numeroUm;
        this.numeroDois = numeroDois;
    }
    
    public abstract double calcular();
    
    public abstract void exibirResultado();
}


class Adicao extends Calculadora {
    public Adicao(double numeroUm, double numeroDois) {
        super(numeroUm, numeroDois);
    }
    
    @Override
    public double calcular() {
        return numeroUm + numeroDois;
    }
    
    @Override
    public void exibirResultado() {
        System.out.printf("%.2f + %.2f = %.2f%n", numeroUm, numeroDois, calcular());
    }
}

class Subtracao extends Calculadora {
    public Subtracao(double numeroUm, double numeroDois) {
        super(numeroUm, numeroDois);
    }
    
    @Override
    public double calcular() {
        return numeroUm - numeroDois;
    }
    
    @Override
    public void exibirResultado() {
        System.out.printf("%.2f - %.2f = %.2f%n", numeroUm, numeroDois, calcular());
    }
}

class Multiplicacao extends Calculadora {
    public Multiplicacao(double numeroUm, double numeroDois) {
        super(numeroUm, numeroDois);
    }
    
    @Override
    public double calcular() {
        return numeroUm * numeroDois;
    }
    
    @Override
    public void exibirResultado() {
        System.out.printf("%.2f * %.2f = %.2f%n", numeroUm, numeroDois, calcular());
    }
}

class Divisao extends Calculadora {
    public Divisao(double numeroUm, double numeroDois) {
        super(numeroUm, numeroDois);
    }
    
    @Override
    public double calcular() {
        if (numeroDois == 0) {
            throw new ArithmeticException("Impossível realizar uma divisão por zero.");
        }
        return numeroUm / numeroDois;
    }
    
    @Override
    public void exibirResultado() {
        try {
            System.out.printf("%.2f / %.2f = %.2f%n", numeroUm, numeroDois, calcular());
        } catch (ArithmeticException e) {
            System.out.println(e.getMessage());
        }
    }
}

class Potencia extends Calculadora {
    public Potencia(double numeroUm, double numeroDois) {
        super(numeroUm, numeroDois);
    }
    
    @Override
    public double calcular() {
        if (numeroDois == 0) {
            return 1;
        }
        return Math.pow(numeroUm, numeroDois);
    }
    
    @Override
    public void exibirResultado() {
        System.out.printf("%.2f ^ %.2f = %.2f%n", numeroUm, numeroDois, calcular());
    }
}

class RaizQuadrada extends Calculadora {
    public RaizQuadrada(double numeroUm) {
        super(numeroUm, 0);
    }
    
    @Override
    public double calcular() {
        if (numeroUm < 0) {
            throw new ArithmeticException("Não existe raiz de número negativo.");
        }
        return Math.sqrt(numeroUm);
    }
    
    @Override
    public void exibirResultado() {
        try {
            System.out.printf("√%.2f = %.2f%n", numeroUm, calcular());
        } catch (ArithmeticException e) {
            System.out.println(e.getMessage());
        }
    }
}


public class CalculadoraPrincipal {
    private Scanner scanner;
    
    public CalculadoraPrincipal() {
        scanner = new Scanner(System.in);
    }
    
    public void executar() {
        System.out.println("=== CALCULADORA POO ===");
        System.out.println("Bem-vindo à Calculadora!");
        
        while (true) {
            exibirMenu();
            String opcao = scanner.nextLine().toUpperCase();
            
            if (opcao.equals("Q")) {
                System.out.println("Encerrando a calculadora. Obrigado!");
                break;
            }
            
            processarOpcao(opcao);
            System.out.println();
        }
        
        scanner.close();
    }
    
    private void exibirMenu() {
        System.out.println("\n--- MENU DE OPERAÇÕES ---");
        System.out.println("1 - Adição");
        System.out.println("2 - Subtração");
        System.out.println("3 - Multiplicação");
        System.out.println("4 - Divisão");
        System.out.println("5 - Potência");
        System.out.println("6 - Raiz Quadrada");
        System.out.println("Q - Sair");
        System.out.print("Escolha uma opção: ");
    }
    
    private void processarOpcao(String opcao) {
        switch (opcao) {
            case "1":
                realizarOperacao("adição");
                break;
            case "2":
                realizarOperacao("subtração");
                break;
            case "3":
                realizarOperacao("multiplicação");
                break;
            case "4":
                realizarOperacao("divisão");
                break;
            case "5":
                realizarOperacao("potência");
                break;
            case "6":
                realizarRaizQuadrada();
                break;
            default:
                System.out.println("Opção inválida! Tente novamente.");
        }
    }
    
    private void realizarOperacao(String tipoOperacao) {
        try {
            System.out.print("Digite o primeiro número: ");
            double numeroUm = Double.parseDouble(scanner.nextLine());
            
            System.out.print("Digite o segundo número: ");
            double numeroDois = Double.parseDouble(scanner.nextLine());
            
            Calculadora calc = criarCalculadora(tipoOperacao, numeroUm, numeroDois);
            if (calc != null) {
                calc.exibirResultado();
            }
            
        } catch (NumberFormatException e) {
            System.out.println("Erro: Por favor, digite apenas números válidos.");
        }
    }
    
    private void realizarRaizQuadrada() {
        try {
            System.out.print("Digite o número para calcular a raiz quadrada: ");
            double numero = Double.parseDouble(scanner.nextLine());
            
            RaizQuadrada raiz = new RaizQuadrada(numero);
            raiz.exibirResultado();
            
        } catch (NumberFormatException e) {
            System.out.println("Erro: Por favor, digite apenas números válidos.");
        }
    }
    
    private Calculadora criarCalculadora(String tipo, double num1, double num2) {
        switch (tipo) {
            case "adição":
                return new Adicao(num1, num2);
            case "subtração":
                return new Subtracao(num1, num2);
            case "multiplicação":
                return new Multiplicacao(num1, num2);
            case "divisão":
                return new Divisao(num1, num2);
            case "potência":
                return new Potencia(num1, num2);
            default:
                return null;
        }
    }
    
    public static void main(String[] args) {
        CalculadoraPrincipal calculadora = new CalculadoraPrincipal();
        calculadora.executar();
    }
}
